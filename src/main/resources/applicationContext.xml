<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:jee="http://www.springframework.org/schema/jee" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.0.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd"
	default-lazy-init="true">

	<description>Spring公共配置 </description>

	<!-- 定义受环境影响易变的变量 -->
	<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE" />
		<property name="ignoreResourceNotFound" value="true" />
		<property name="locations">
			<list>
				<!-- 标准配置 -->
				<value>classpath*:/jdbc.properties</value>
			</list>
		</property>
	</bean>

	<!-- 使用annotation 自动注册bean,并保证@Required,@Autowired的属性被注入 -->
	<!-- component-scan自动搜索@Component , @Controller , @Service , @Repository等标注的类 -->
	<context:component-scan base-package="org.**.account" />

	<!-- 数据源配置,使用应用内的DBCP数据库连接池 -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<!-- Connection Info -->
		<property name="driverClassName" value="${jdbc.driver}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />

		<!-- Connection Pooling Info -->
		<property name="initialSize" value="${dbcp.initialSize}" />
		<property name="maxActive" value="${dbcp.maxActive}" />
		<property name="maxIdle" value="${dbcp.maxIdle}" />
		<property name="defaultAutoCommit" value="true" />
	</bean>

	<!-- 数据源配置,使用应用服务器的数据库连接池 -->
	<!--<jee:jndi-lookup id="dataSource" jndi-name="java:comp/env/jdbc/ExampleDB" />-->

	<!-- Hibernate配置 -->
	<!-- 
	<bean id="sessionFactory" class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="namingStrategy">
			<bean class="org.hibernate.cfg.ImprovedNamingStrategy" />
		</property>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">${hibernate.dialect}</prop>
				<prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
				<prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
				<prop key="hibernate.cache.provider_class">org.hibernate.cache.EhCacheProvider</prop>
				<prop key="hibernate.cache.provider_configuration_file_resource_path">${hibernate.ehcache_config_file}</prop>
			</props>
		</property>
		<property name="packagesToScan" value="com.csic.website.entity.*" />
	</bean>
	 -->
	
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="configLocation" value="classpath:/configuration.xml"/>
		<property name="mapperLocations" value="classpath*:/org/**/model/**/*Mapper.xml"/>
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	<!-- 事务管理器配置,单数据源事务 -->
	<!-- 
	<bean id="transactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
 	-->
 	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	<bean id="baseDAO" abstract="true" lazy-init="true">
		<constructor-arg>
			<bean class="org.mybatis.spring.SqlSessionTemplate">
				<constructor-arg ref="sqlSessionFactory" />
			</bean>
		</constructor-arg>
	</bean>
	<!--  org.springframework.samples.mvc.basic.account.dao.UserDao
	<bean id="testDao" parent="baseDAO" class="org.springframework.orm.ibatis3.support.SqlSessionDaoSupport" />
	-->
	<bean id="UserDao" parent="baseDAO" class="org.mybatis.spring.support.SqlSessionDaoSupport" />
	<bean id="RoleDao" parent="baseDAO" class="org.mybatis.spring.support.SqlSessionDaoSupport" />
	<bean id="AuthorityDao" parent="baseDAO" class="org.mybatis.spring.support.SqlSessionDaoSupport" />
	
	<!-- 验证码生成器 -->
 <bean id="fastHashMapCaptchaStore" class="com.octo.captcha.service.captchastore.FastHashMapCaptchaStore"/>
 
 <bean id="captchaEngineEx" class="org.springframework.samples.mvc.basic.account.CaptchaEngineEx"/>
 
 <bean id="imageCaptchaService" class="org.springframework.samples.mvc.basic.account.CaptchaService">
  <constructor-arg type="com.octo.captcha.service.captchastore.CaptchaStore" index="0">
   <ref bean="fastHashMapCaptchaStore"/>
  </constructor-arg>
  <constructor-arg type="com.octo.captcha.engine.CaptchaEngine" index="1">
   <ref bean="captchaEngineEx"/>
  </constructor-arg>
  <constructor-arg index="2">
   <value>180</value>   
  </constructor-arg>
  <constructor-arg index="3">
   <value>100000</value>   
  </constructor-arg>
  <constructor-arg index="4">
   <value>75000</value>   
  </constructor-arg> 
 </bean>
	
 	<bean id="captchaAuthenticationFilter" class="org.springframework.security.captcha.JcaptchaAuthenticationFilter"> 
        <property name="imageCaptchaService" ref="imageCaptchaService" /> 
        <property name="authenticationFailureUrl" value="/login?authfailed=true" /> 
	</bean> 
	<!-- 使用annotation定义事务 -->
	<tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true" />
</beans>